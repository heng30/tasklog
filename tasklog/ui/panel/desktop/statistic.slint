import { RecordState } from "../../store.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import { IconBtn, FlickableWithScrollBar, DatePicker, DatePickerPopup, Label, HorizontalLedNumber, VerticalLedNumber, ChartBar, ChartBarEntry } from "../../base/widgets.slint";

component SummaryItem inherits VerticalLayout {
    in-out property <int> number;
    in-out property number-color <=> number-label.color;
    in-out property describe <=> describe-label.text;
    in-out property describe-color <=> describe-label.color;

    VerticalLayout {
        spacing: Theme.spacing * 2;
        alignment: center;

        number-label := Label {
            horizontal-alignment: center;
            font-size: Theme.title1-font-size * 2;
            font-weight: Theme.bold-font-weight;
            color: Theme.thirdly-brand-color;
            text: number;
        }

        describe-label := Label {
            horizontal-alignment: center;
            font-size: Theme.title3-font-size;
            color: Theme.placeholder-text-color;
        }
    }
}

component Summary inherits VerticalLayout {
    init => {
        Logic.statistic-init();
    }

    function calc-total-days(_flag: int) -> int {
        return Logic.statistic-total-days-spent(Store.statistic-entries);
    }

    Rectangle {
        height: hbox.preferred-height;
        background: Theme.hover-background;
        border-radius: Theme.border-radius;

        hbox := HorizontalLayout {
            padding: Theme.padding * 4;
            spacing: Theme.spacing * 4;
            alignment: space-around;

            SummaryItem {
                number: Store.statistic-entries.length;
                describe: Logic.tr("Total Tasks");
            }

            total-days := SummaryItem {
                number: calc-total-days(Store.statistic-entries.length);
                number-color: Theme.success-color;
                describe: Logic.tr("Total Days Spent");
            }

            mean-days := SummaryItem {
                number: Store.statistic-entries.length <= 0 ? 0 : total-days.number / Store.statistic-entries.length;
                number-color: Theme.warning-color;
                describe: Logic.tr("Mean Days Spent");
            }
        }
    }
}

component Chart inherits Rectangle {
    private property <int> current-index;

    pure function statistic-chart-tasks-count(_flag: int) -> [ChartBarEntry] {
        return Logic.statistic-chart-tasks-count(Store.statistic-entries);
    }

    pure function statistic-chart-days-spent(_flag: int) -> [ChartBarEntry] {
        return Logic.statistic-chart-days-spent(Store.statistic-entries);
    }

    pure function statistic-chart-mean-days-spent(_flag: int) -> [ChartBarEntry] {
        return Logic.statistic-chart-mean-days-spent(Store.statistic-entries);
    }

    if current-index == 0: ChartBar {
        title: Logic.tr("Tasks Count");
        entries: statistic-chart-tasks-count(Store.statistic-entries.length);
        is-hide-number-axis: true;
    }

    if current-index == 1: ChartBar {
        title: Logic.tr("Days Spent");
        entries: statistic-chart-days-spent(Store.statistic-entries.length);
        is-hide-number-axis: true;
    }

    if current-index == 2: ChartBar {
        title: Logic.tr("Mean Days Spent");
        entries: statistic-chart-mean-days-spent(Store.statistic-entries.length);
        is-hide-number-axis: true;
    }

    HorizontalLayout {
        alignment: end;
        IconBtn {
            icon-size: Theme.icon-size / Theme.golden-ratio;
            icon: Icons.next-light;

            clicked => {
                current-index = current-index + 1;
                current-index = Math.mod(current-index, 3);
            }
        }
    }
}

export component Statistic inherits VerticalLayout {
    padding: Theme.padding * 2;
    spacing: Theme.spacing * 4;
    Summary { }

    Chart { }
}
