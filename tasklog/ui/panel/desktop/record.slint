import { ListView, DatePickerPopup } from "std-widgets.slint";

import { RecordState, SortRecord, RecordEntry } from "../../store.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import { Search, LineInput, Label, IconBtn, FlashProgress, ConfirmBtn, TextBtnWithoutIcon, GainFocus, HorizontalLedNumber, Divider } from "../../base/widgets.slint";

component TaskCard inherits Rectangle {
    in-out property <RecordEntry> entry;

    width: vbox.preferred-width;
    height: vbox.preferred-height;
    background: Theme.secondary-background;
    border-radius: Theme.border-radius * 2;
    border-color: ta.has-hover ? Theme.thirdly-brand-color : Theme.base-border-color;
    border-width: Theme.default-border-width;
    drop-shadow-blur: Theme.padding * 2;
    drop-shadow-color: self.border-color;

    ta := TouchArea { }

    function remain-days(start-date: string, end-date: string) -> int {
        return 12;
    }

    function calc-progress(start-date: string, end-date: string) -> float {
        return 0.5;
    }

    function state-color(state: RecordState) -> color {
        if (state == RecordState.Unfinish) {
            return Theme.thirdly-brand-color;
        } else if (state == RecordState.Finished) {
            return Theme.success-color;
        } else if (state == RecordState.Giveup) {
            return Theme.danger-color;
        } else {
            return Theme.warning-color;
        }
    }

    vbox := VerticalLayout {
        padding: Theme.padding * 4;

        num-hbox := HorizontalLayout {
            width: Theme.icon-size * 12;
            alignment: LayoutAlignment.center;

            HorizontalLayout {
                alignment: LayoutAlignment.center;

                led-number := HorizontalLedNumber {
                    number-spacing: Theme.spacing * 4;
                    number-padding: Theme.padding * 4;
                    number-size: Theme.icon-size * 2;
                    colorize: state-color(entry.state);
                    numbers: [4, 5];
                }
            }

            VerticalLayout {
                alignment: LayoutAlignment.end;
                padding-bottom: Theme.padding * 4;

                Label {
                    text: Logic.tr("days");
                    color: Theme.placeholder-text-color;
                }
            }
        }

        Divider {
            height: Theme.default-border-width * 2;
        }

        HorizontalLayout {
            padding-top: Theme.padding * 2;

            Label {
                width: num-hbox.width;
                font-size: Theme.title3-font-size;
                font-weight: Theme.bold-font-weight;
                wrap: word-wrap;
                text: entry.title;
            }
        }

        HorizontalLayout {
            padding-top: Theme.padding * 4;
            alignment: LayoutAlignment.end;

            Label {
                text: Logic.tr("Ends on ") + entry.end-date;
                color: Theme.placeholder-text-color;
            }
        }
    }
}

export component Record inherits ListView {
    private property <int> column-counts: 2;
    private property <int> row-counts: Math.ceil(Store.record-entries.length / column-counts);

    for row-index in row-counts: VerticalLayout {
        padding: Theme.padding * 4;

        HorizontalLayout {
            spacing: Theme.spacing * 8;
            // alignment: LayoutAlignment.space-around;

            for column-index in column-counts: TaskCard {
                private property <int> current-index: row-index * column-counts + column-index;
                private property <bool> is-show-card: current-index < Store.record-entries.length;

                visible: is-show-card;
                entry: Store.record-entries[ is-show-card ? current-index : 0];
            }
        }
    }
}
