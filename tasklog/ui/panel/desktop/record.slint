import { ListView, DatePickerPopup } from "std-widgets.slint";

import { RecordState, SortRecord } from "../../store.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import { LineInput, Label, IconBtn, FlashProgress, ConfirmBtn } from "../../base/widgets.slint";


export component TableHeader inherits Rectangle {
    in-out property <length> title-start-date-width;
    in-out property <length> title-end-date-width;

    background: Theme.thirdly-background.darker(Store.setting-preference.is-dark ? 50% : 20%);

    HorizontalLayout {
        padding-left: Theme.padding * 4;
        padding-right: Theme.padding * 4;
        padding-top: Theme.padding * 3;
        padding-bottom: Theme.padding * 3;
        alignment: LayoutAlignment.space-between;

        HorizontalLayout {
            alignment: LayoutAlignment.start;
            spacing: Theme.spacing * 4;

            title-start-date := Label {
                width: title-start-date-width;
                text: Logic.tr("START");
                font-weight: Theme.bold-font-weight;
                font-size: Theme.title3-font-size;

                TouchArea {
                    mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
                    clicked => {
                        Logic.sort-record(SortRecord.Start);
                    }
                }
            }

            title-end-date := Label {
                width: title-end-date-width;
                text: Logic.tr("END");
                font-weight: Theme.bold-font-weight;
                font-size: Theme.title3-font-size;

                TouchArea {
                    mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
                    clicked => {
                        Logic.sort-record(SortRecord.End);
                    }
                }
            }

            title-goal := Label {
                width: 30%;
                text: Logic.tr("GOAL");
                font-weight: Theme.bold-font-weight;
                font-size: Theme.title3-font-size;

                TouchArea {
                    mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
                    clicked => {
                        Logic.sort-record(SortRecord.Goal);
                    }
                }
            }
        }

        HorizontalLayout {
            padding-right: Theme.padding * 2;
            ConfirmBtn {
                icon: Icons.add-small;
                text: Logic.tr("New");
                clicked => {
                    Logic.add-record();
                }
            }
        }
    }
}

export component TableBody inherits ListView {
    in-out property <length> title-start-date-width;
    in-out property <length> title-end-date-width;

    function progress-color(state: RecordState) -> color {
        if (state == RecordState.Unfinish) {
            return Theme.thirdly-brand-color;
        } else if (state == RecordState.Finished) {
            return Theme.success-color;
        } else if (state == RecordState.Giveup) {
            return Theme.danger-color;
        } else {
            return Theme.warning-color;
        }
    }

    // TODO
    function calc-progress(start-date: string, end-date: string) -> float {
        return 0.5;
    }

    for entry[index] in Store.record-entries: vbox := VerticalLayout {
        private property <bool> is-hover;
        private property <bool> is-edit-title;

        Rectangle {
            background: (ta.has-hover || is-hover) ? Theme.checked-background : (Math.mod(index, 2) == 1 ? Theme.hover-background : Colors.transparent);

            ta := TouchArea { }

            HorizontalLayout {
                spacing: Theme.spacing * 4;
                padding-left: Theme.padding * 4;
                padding-right: Theme.padding * 4;
                padding-top: Theme.padding * 3;
                padding-bottom: Theme.padding * 3;

                Label {
                    init => {
                        title-start-date-width = self.preferred-width;
                    }
                    text: entry.start-date;
                }

                Label {
                    init => {
                        title-end-date-width = self.preferred-width;
                    }
                    text: entry.end-date;
                }

                Label {
                    width: 30%;
                    text: entry.title;
                    overflow: elide;
                }

                VerticalLayout {
                    alignment: LayoutAlignment.center;

                    FlashProgress {
                        progress: calc-progress(entry.start-date, entry.end-date);
                        finished-color: progress-color(entry.state);
                    }
                }

                IconBtn {
                    icon: Icons.more-v;
                    show-icon-hover-background: false;

                    clicked => {
                    }
                }
            }
        }
    }
}

export component Record inherits VerticalLayout {
    // padding-top: Theme.padding * 2;
    private property <length> title-start-date-width;
    private property <length> title-end-date-width;

    Rectangle {
        border-width: Theme.default-border-width;
        border-color: Theme.primary-text-color;

        VerticalLayout {
            padding: parent.border-width;

            TableHeader {
                title-start-date-width: title-start-date-width;
                title-end-date-width: title-end-date-width;
            }

            TableBody {
                changed title-start-date-width => {
                    root.title-end-date-width = self.title-end-date-width;
                }

                changed title-end-date-width => {
                    root.title-start-date-width = self.title-start-date-width;
                }
            }
        }
    }
}

    // date-picker := DatePickerPopup {
    //     x: (root.width - self.width) / 2;
    //     y: (root.height - self.height) / 2;
    //     close-policy: PopupClosePolicy.close-on-click-outside;
    //
    //     accepted(date) => {
    //         debug(date.year + "-" + date.month + "-" + date.day);
    //         self.close();
    //     }
    //     canceled => {
    //         self.close();
    //     }
    // }

                    // if is-edit-title: LineInput {
                    //     // width: Math.min(parent.width * 30%, self.preferred-width);
                    //     width: 30%;
                    //     text: entry.title;
                    //     is-show-icon: true;
                    //     icon: Icons.checked-box;
                    //
                    //     accepted => {
                    //         is-edit-title = false;
                    //     }
                    //
                    //     clicked => {
                    //         is-edit-title = false;
                    //     }
                    // }

