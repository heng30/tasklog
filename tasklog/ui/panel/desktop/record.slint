import { ListView, DatePickerPopup } from "std-widgets.slint";

import { RecordState, SortRecord, RecordEntry } from "../../store.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import { Search, LineInput, Label, IconBtn, FlashProgress, ConfirmBtn, TextBtnWithoutIcon, GainFocus, HorizontalLedNumber, Divider, Tag } from "../../base/widgets.slint";

component TaskCard inherits Rectangle {
    in-out property <RecordEntry> entry;

    private property <bool> has-hover: ta.has-hover || state-btn.has-hover || more-icon.has-hover;

    function remain-days(start-date: string, end-date: string) -> [int] {
        return [4, 5];
    }

    function calc-progress(start-date: string, end-date: string) -> float {
        return 0.5;
    }

    function state-color(state: RecordState) -> color {
        if (state == RecordState.Unfinished) {
            return Theme.thirdly-brand-color;
        } else if (state == RecordState.Finished) {
            return Theme.success-color;
        } else if (state == RecordState.Giveup) {
            return Theme.danger-color;
        } else {
            return Theme.warning-color;
        }
    }

    function state-str(state: RecordState) -> string {
        if (state == RecordState.Unfinished) {
            return Logic.tr("Unfinished");
        } else if (state == RecordState.Finished) {
            return Logic.tr("Finished");
        } else if (state == RecordState.Giveup) {
            return Logic.tr("Giveup");
        } else {
            return Logic.tr("Timeout");
        }
    }

    preferred-width: vbox.preferred-width;
    preferred-height: vbox.preferred-height;
    background: Theme.secondary-background;
    border-radius: Theme.border-radius * 2;
    border-color: root.has-hover ? Theme.thirdly-brand-color : Theme.base-border-color;
    border-width: Theme.default-border-width;
    drop-shadow-blur: Theme.padding * 2;
    drop-shadow-color: self.border-color;

    states [
        zoom-in when root.has-hover: {
            width: vbox.preferred-width + Theme.padding * 2;
            height: vbox.preferred-height + Theme.padding * 2;
            in {
                animate width, height { duration: Theme.default-animate-duration; }
            }
            out {
                animate width, height { duration: Theme.default-animate-duration; }
            }
        }
        zoom-out when !root.has-hover: {
            width: vbox.preferred-width;
            height: vbox.preferred-height;
        }
    ]

    ta := TouchArea { }

    more-icon := IconBtn {
        x: root.width - self.width - Theme.padding * 4;
        y: Theme.padding * 4;
        width: Theme.icon-size;
        height: self.width;
        icon: Icons.more-v;

        clicked => {
           // TODO
        }
    }

    vbox := VerticalLayout {
        padding: Theme.padding * 4;

        num-hbox := HorizontalLayout {
            width: Theme.icon-size * 12;
            alignment: LayoutAlignment.center;

            HorizontalLayout {
                alignment: LayoutAlignment.center;

                led-number := HorizontalLedNumber {
                    number-spacing: Theme.spacing * 4;
                    number-padding: Theme.padding * 4;
                    number-size: Theme.icon-size * 2;
                    colorize: state-color(entry.state);
                    numbers: remain-days(entry.start-date, entry.end-date);
                }
            }

            VerticalLayout {
                alignment: LayoutAlignment.end;
                padding-bottom: Theme.padding * 4;

                Label {
                    text: entry.start-date != entry.end-date ? Logic.tr("days") : Logic.tr("day");
                    color: Theme.placeholder-text-color;
                }
            }
        }

        Divider {
            height: Theme.default-border-width * 2;
        }

        HorizontalLayout {
            padding-top: Theme.padding * 2;

            title-lb := Label {
                vertical-alignment: TextVerticalAlignment.top;
                width: num-hbox.width;
                height: title-lb.font-size * 3;
                font-size: Theme.title3-font-size;
                font-weight: Theme.bold-font-weight;
                wrap: word-wrap;
                text: entry.title;
                overflow: elide;
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.start;
            padding-top: Theme.padding * 4;
            spacing: Theme.spacing * 2;

            for index in 3: Tag {
                visible: !self.text.is-empty;
                text: index == 0 && entry.tags.length >= 1 ? entry.tags[index] : (entry.tags.length >= 2 && index == 1 ? entry.tags[index] : (entry.tags.length >= 3 && index == 2 ? entry.tags[index] : ""));
                background: Theme.tag-colors[index];
                hpadding: Theme.padding * 2;
                text-color: self.background.darker(150%);
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.space-between;
            padding-top: Theme.padding * 4;

            state-btn := TextBtnWithoutIcon {
                text: state-str(entry.state);
                text-color: led-number.colorize;
                font-weight: Theme.bold-font-weight;

                clicked => {
                    Logic.update-task-state(RecordState.Finished);
                }
            }

            Label {
                text: Logic.tr("Ends on ") + entry.end-date;
                color: Theme.placeholder-text-color;
            }
        }
    }
}

export component Record inherits ListView {
    private property <length> task-card-width: Theme.icon-size * 12;
    private property <int> column-counts: (self.width - Theme.padding * 8 - Theme.padding * 8 * 2) / task-card-width;
    private property <int> row-counts: Math.ceil(Store.record-entries.length / column-counts);

    init => {
        debug(self.width, self.task-card-width);
    }

    for row-index in row-counts: VerticalLayout {
        padding: Theme.padding * 4;

        HorizontalLayout {
            spacing: Theme.spacing * 8;
            alignment: LayoutAlignment.space-around;

            for column-index in column-counts: Rectangle {
                width: tc.width;
                height: tc.height;

                tc := TaskCard {
                    private property <int> current-index: row-index * column-counts + column-index;
                    private property <bool> is-show-card: current-index < Store.record-entries.length;

                    init => {
                        task-card-width = Math.max(self.preferred-width, task-card-width);
                    }

                    visible: is-show-card;
                    entry: Store.record-entries[ is-show-card ? current-index : 0];
                }
            }
        }
    }
}
