import { ListView } from "std-widgets.slint";
import { Date} from "../../base/def.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import { RecordState, RecordEntry, PopupIndex } from "../../store.slint";
import { Search, Label, IconBtn, TextBtnWithoutIcon, GainFocus, HorizontalLedNumber, Divider, Tag, CircleProgress, PopupActionSetting, BlankWelcome, DatePickerPopup } from "../../base/widgets.slint";

component StatePopup inherits PopupWindow {
    in-out property <RecordState> current-state;

    function state-values(state: RecordState) -> [string] {
        if (state == RecordState.NotStarted) {
            return [Logic.tr("Giveup"), Logic.tr("Running"), Logic.tr("Finished")];
        } else if (state == RecordState.Running) {
            return [Logic.tr("Giveup"), Logic.tr("Finished")];
        } else if (state == RecordState.Finished) {
            return [Logic.tr("Running"), Logic.tr("Giveup")];
        } else if (state == RecordState.Giveup) {
            return [Logic.tr("Running"), Logic.tr("Finished")];
        } else if (state == RecordState.Timeout) {
            return [Logic.tr("Giveup"), Logic.tr("Finished")];
        } else {
            return [];
        }
    }

    callback update-record-state(state: string);

    Rectangle {
        background: Theme.base-background;
        border-width: Theme.default-border-width;
        border-color: Theme.base-border-color;

        VerticalLayout {
            spacing: Theme.spacing * 2;
            padding: Theme.padding * 2;

            for value[index] in state-values(current-state): Rectangle {
                background: state-pop-ta.has-hover ? Theme.hover-background : Theme.base-background;
                border-radius: Theme.border-radius;

                state-pop-hbox := HorizontalLayout {
                    padding: Theme.padding * 2;
                    Label {
                        text: value;
                        font-size: Theme.title5-font-size;
                    }
                }

                state-pop-ta := TouchArea {
                    mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
                    clicked => {
                        root.update-record-state(value);
                    }
                }
            }
        }
    }
}

component TopBar inherits HorizontalLayout {
    alignment: LayoutAlignment.center;

    Rectangle {
        width: 80%;
        height: hbox.preferred-height;
        border-radius: self.height / 2;
        background: Theme.secondary-background;
        border-width: Theme.default-border-width;
        border-color: Theme.base-border-color;

        hbox := HorizontalLayout {
            spacing: Theme.spacing * 4;
            padding: Theme.padding * 2;
            padding-left: Theme.padding * 4;
            padding-right: Theme.padding * 4;

            search := Search {
                gain-focus-when-clicked: false;

                search(text) => {
                    Logic.search-record(text);
                }

                edited(text) => {
                    Logic.search-record(text);
                }
            }

            IconBtn {
                icon: Icons.refresh;
                hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                clicked => {
                    search.text = "";
                    Logic.refresh-records();
                }
            }

            IconBtn {
                icon: Icons.add-light;
                hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                clicked => {
                    Logic.open-record-dialog(-1);
                }
            }
        }
    }
}

component TaskCard inherits Rectangle {
    in-out property <RecordEntry> entry;
    in-out property <int> current-index;

    in-out property <bool> has-hover: ta.has-hover || state-btn.has-hover || more-icon.has-hover || led-number-ta.has-hover || progress-ta.has-hover;

    width: vbox.preferred-width;
    height: vbox.preferred-height;
    preferred-width: vbox.preferred-width;
    preferred-height: vbox.preferred-height;

    background: Theme.secondary-background;
    border-radius: Theme.border-radius * 2;
    border-color: root.has-hover ? Theme.thirdly-brand-color : Theme.base-border-color;
    border-width: Theme.default-border-width;
    drop-shadow-blur: Theme.padding * 2;
    drop-shadow-color: self.border-color;

    ta := TouchArea { }

    CircleProgress {
        x: Theme.padding * 2;
        y: Theme.padding * 2;
        radius: Theme.icon-size * 0.8;
        ring-width: Theme.padding;
        font-size: Theme.default-font-size * 2 / 3;
        finished-text: "100%";
        finished-text-color: self.unfinished-text-color;
        finished-text-background: self.unfinished-progress-color;
        finished-progress-color: led-number.colorize;
        progress: Logic.record-progress(entry);
        height: self.width;

        progress-ta := TouchArea {
            mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
            clicked => {
                Logic.open-record-plan-dialog(current-index);
            }
        }
    }

    more-icon := IconBtn {
        x: root.width - self.width - Theme.padding * 4;
        y: Theme.padding * 4;
        width: Theme.icon-size;
        height: self.width;
        icon: Icons.more-v;
        hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

        clicked => {
            PopupActionSetting.show(self.absolute-position.x + self.mouse-x + Theme.padding, self.absolute-position.y + self.mouse-y + Theme.padding, [
                {
                    icon: Icons.edit,
                    text: Logic.tr("Edit"),
                    action: "edit-record",
                    user-data: current-index,
                },
                {
                    icon: Icons.plan-fill,
                    text: Logic.tr("Plan"),
                    action: "plan-record",
                    user-data: current-index,
                },
                {
                    icon: Icons.archive-fill,
                    text: Logic.tr("Archive"),
                    action: "archive-record",
                    user-data: current-index,
                },
                {
                    icon: Icons.delete-fill,
                    text: Logic.tr("Remove"),
                    action: "remove-record",
                    user-data: current-index,
                },
            ]);
        }
    }

    vbox := VerticalLayout {
        padding: Theme.padding * 4;
        alignment: LayoutAlignment.center;

        num-hbox := Rectangle {
            private property <Date> current-date: Util.get-current-date();

            width: Theme.icon-size * 12;
            height: self.preferred-height;

            states [
                zoom-in when root.has-hover: {
                    width: Theme.icon-size * 12 + Theme.padding * 2;
                    height: self.preferred-height + Theme.padding * 2;
                    in {
                        animate width, height { duration: Theme.default-animate-duration; }
                    }
                    out {
                        animate width, height { duration: Theme.default-animate-duration; }
                    }
                }
                zoom-out when !root.has-hover: {
                    width: Theme.icon-size * 12;
                    height: self.preferred-height;
                }
            ]

            Label {
                x: Math.max(0, led-number.x - self.preferred-width);
                y: led-number.y + led-number.preferred-height - self.preferred-height - Theme.padding * 4;
                text: entry.state == RecordState.NotStarted ? Logic.tr("start in") : (entry.state == RecordState.Running ? Logic.tr("remain") : Logic.tr("spent"));
                color: Theme.placeholder-text-color;
            }

            led-number := HorizontalLedNumber {
                number-spacing: Theme.spacing * 2;
                number-padding: Theme.padding * 4;
                number-size: Theme.icon-size * 2;
                colorize: Logic.state-color(entry.state);
                numbers: entry.state == RecordState.NotStarted ? Logic.remain-days-numbers(Util.date-str(current-date), entry.start-date) : Logic.remain-days-numbers(entry.start-date, entry.end-date);

                led-number-ta := TouchArea {
                    mouse-cursor: self.has-hover ? MouseCursor.pointer : MouseCursor.default;
                    clicked => {
                        Logic.open-record-dialog(current-index);
                    }
                }
            }

            Label {
                x: Math.min(led-number.x + led-number.preferred-width - Theme.padding * 2, root.width - self.preferred-width);
                y: led-number.y + led-number.preferred-height - self.preferred-height - Theme.padding * 4;
                color: Theme.placeholder-text-color;
                text: (entry.state == RecordState.NotStarted && Logic.remain-days(Util.date-str(current-date), entry.start-date) > 1) || (entry.state != RecordState.NotStarted && Logic.remain-days(entry.start-date, entry.end-date) > 1) ? Logic.tr("days") : Logic.tr("day");
            }
        }

        Divider {
            height: Theme.default-border-width * 2;
        }

        HorizontalLayout {
            padding-top: Theme.padding * 2;

            title-lb := Label {
                vertical-alignment: TextVerticalAlignment.top;
                width: num-hbox.width;
                height: title-lb.font-size * 3;
                font-size: Theme.title3-font-size;
                font-weight: Theme.bold-font-weight;
                wrap: word-wrap;
                text: entry.title;
                overflow: elide;
            }
        }

        VerticalLayout {
            alignment: LayoutAlignment.start;

            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-top: Theme.padding * 4;
                spacing: Theme.spacing * 4;

                for index in 3: Tag {
                    visible: !self.text.is-empty;
                    text: index == 0 && entry.tags.length >= 1 ? entry.tags[index] : (entry.tags.length >= 2 && index == 1 ? entry.tags[index] : (entry.tags.length >= 3 && index == 2 ? entry.tags[index] : ""));
                    background: Theme.tag-colors[index];
                }
            }
        }

        HorizontalLayout {
            alignment: LayoutAlignment.space-between;
            padding-top: Theme.padding * 4;

            state-btn := TextBtnWithoutIcon {
                text: Logic.state-to-str(entry.state);
                text-color: led-number.colorize;
                font-weight: Theme.bold-font-weight;

                clicked => {
                    state-popup.show();
                }
            }

            Label {
                text: entry.state == RecordState.NotStarted ? Logic.tr("Start on") + " " + entry.start-date : Logic.tr("Ends on") + " " + entry.end-date;
                color: entry.state == RecordState.NotStarted ? Theme.danger-color : Theme.placeholder-text-color;
            }
        }
    }

    state-popup := StatePopup {
        x: state-btn.absolute-position.x - root.absolute-position.x + state-btn.width / 2 - self.width / 2;
        y: state-btn.absolute-position.y - root.absolute-position.y - self.height - Theme.padding * 2;
        current-state: entry.state;

        update-record-state(value) => {
            Logic.update-record-state(current-index, Logic.str-to-state(value));
        }
    }
}

export component Record inherits Rectangle {
    GainFocus { }

    if Store.record-entries.length == 0: BlankWelcome {
        title: Logic.tr("Welcome to the TaskLog!");
        sub-title: Logic.tr("You can trace your tasks");
    }

    VerticalLayout {
        private property <length> task-card-width: Theme.icon-size * 12;
        private property <int> column-counts: (self.width - Theme.padding * 8 - Theme.padding * 8 * 2) / task-card-width;
        private property <int> row-counts: Math.ceil(Store.record-entries.length / column-counts);

        spacing: Theme.spacing * 2;

        TopBar {
            width: 100%;
        }

        ListView {
            horizontal-scrollbar-policy: always-off;

            for row-index in row-counts: VerticalLayout {
                padding: Theme.padding * 4;

                HorizontalLayout {
                    spacing: Theme.spacing * 8;
                    alignment: LayoutAlignment.space-around;

                    for column-index in column-counts: Rectangle {
                        width: tc.width + Theme.padding * 2;
                        height: tc.height + Theme.padding * 2;

                        tc := TaskCard {
                            private property <bool> is-show-card: self.current-index < Store.record-entries.length;

                            init => {
                                task-card-width = Math.max(self.preferred-width, task-card-width);
                            }

                            visible: is-show-card;
                            current-index: row-index * column-counts + column-index;
                            entry: Store.record-entries[ is-show-card ? self.current-index : 0];
                        }
                    }
                }
            }
        }
    }
}
