import { ListView } from "std-widgets.slint";
import { RecordState } from "../../store.slint";
import { Theme, Icons, Store, Logic } from "../def.slint";
import { Label, Tag, IconBtn, CircleProgress, PopupActionSetting, CenterLayout, NoMessageImg } from "../../base/widgets.slint";

component CellItem inherits Label { }

export component TableBody inherits ListView {
    private property <length> index-width;
    private property <length> date-width;
    private property <length> state-width;
    private property <length> spent-width;
    private property <length> progress-width;

    for entry[index] in Store.archive-entries: vbox := VerticalLayout {
        private property <bool> is-hover;

        Rectangle {
            background: ta.has-hover ? Theme.checked-background : (Math.mod(index, 2) == 0 ? Theme.table-item-first : Theme.table-item-second);

            ta := TouchArea { }

            HorizontalLayout {
                spacing: Theme.spacing * 8;
                padding-left: Theme.padding * 4;
                padding-right: Theme.padding * 4;
                padding-top: Theme.padding * 3;
                padding-bottom: Theme.padding * 3;

                CellItem {
                    init => {
                        index-width = Math.max(self.preferred-width, index-width);
                    }

                    width: index-width;
                    text: index + 1;
                }

                CellItem {
                    init => {
                        date-width = Math.max(self.preferred-width, date-width);
                    }

                    width: date-width;
                    text: entry.start-date;
                }

                CellItem {
                    private property <int> days: Logic.remain-days(entry.start-date, entry.end-date);

                    init => {
                        spent-width = Math.max(self.preferred-width, spent-width);
                    }

                    width: spent-width;
                    text: days + " " + (days > 1 ? Logic.tr("days") : Logic.tr("day"));
                }

                HorizontalLayout {
                    horizontal-stretch: 1;

                    CellItem {
                        text: entry.title;
                        overflow: elide;
                    }
                }

                VerticalLayout {
                    alignment: center;

                    HorizontalLayout {
                        alignment: LayoutAlignment.start;
                        spacing: Theme.spacing * 2;

                        for tag[index] in entry.tags: Tag {
                            text: tag;
                            background: Theme.tag-colors[index];
                            font-size: Theme.default-font-size - 2px;
                        }
                    }
                }

                VerticalLayout {
                    alignment: center;

                    Rectangle {
                        background: Logic.state-color(entry.state);
                        width: state-item.width + Theme.padding * 4;
                        height: state-item.height + Theme.padding * 2;
                        border-radius: self.height / 2;

                        state-item := CellItem {
                            init => {
                                state-width = Math.max(self.preferred-width, state-width);
                            }

                            width: state-width;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                            text: Logic.state-to-str(entry.state);
                            color: Theme.light-text-color;
                        }
                    }
                }

                VerticalLayout {
                    alignment: center;
                    CircleProgress {
                        radius: Theme.icon-size * 0.8;
                        ring-width: Theme.padding;
                        font-size: Theme.default-font-size * 2 / 3;
                        finished-text: "100%";
                        finished-text-color: self.unfinished-text-color;
                        finished-text-background: self.unfinished-progress-color;
                        finished-progress-color: Logic.state-color(entry.state);
                        progress: Logic.record-progress(entry);
                        height: self.width;
                    }
                }

                IconBtn {
                    icon: Icons.more-v;
                    show-icon-hover-background: false;

                    clicked => {
                        PopupActionSetting.show(self.absolute-position.x + self.mouse-x + Theme.padding, self.absolute-position.y + self.mouse-y + Theme.padding, [
                            {
                                icon: Icons.recover,
                                text: Logic.tr("Recover"),
                                action: "recover-archive",
                                user-data: index,
                            },
                            {
                                icon: Icons.delete-fill,
                                text: Logic.tr("Remove"),
                                action: "remove-archive",
                                user-data: index,
                            },
                        ]);
                    }
                }
            }
        }
    }
}

export component Archive inherits Rectangle {
    border-width: Store.archive-entries.length > 0 ? Theme.default-border-width : 0;
    border-color: Theme.base-border-color;

    if Store.archive-entries.length == 0: CenterLayout {
        NoMessageImg {
            width: root.width;
            text: Logic.tr("No Message");
        }
    }

    VerticalLayout {
        padding: parent.border-width;

        TableBody { }
    }
}
