import { RecordPlanEntry, PopupIndex } from "../../store.slint";
import { Theme, Icons, Store, Util, Logic } from "../def.slint";
import {ConfirmDialogSetting, TxtEdit, Label, IconBtn, GainFocus, ProcessStep, SwitchBtn, Dialog } from "../../base/widgets.slint";

component HeadBar inherits HorizontalLayout {
    in-out property <int> seleted-index;

    spacing: Theme.spacing * 4;
    height: outer-hbox.preferred-height;

    VerticalLayout {
        alignment: center;

        ProcessStep {
            steps: Logic.calc-record-plan-steps(Store.record-plan-entry.plan.length);
            is-hide-text: true;
            text-font-size: Theme.default-font-size;
            number-font-size: Theme.default-font-size;
            process-line-width: (parent.width - self.number-font-size * 3 * self.steps.length) / self.steps.length;
            current-step: Logic.current-record-plan-step(Store.record-plan-entry.plan);
        }
    }

    outer-hbox := HorizontalLayout {
        alignment: end;

        Rectangle {
            height: hbox.preferred-height;
            border-radius: self.height / 2;
            background: Theme.secondary-background;
            border-width: Theme.default-border-width;
            border-color: Theme.base-border-color;

            hbox := HorizontalLayout {
                spacing: Theme.spacing * 4;
                padding: Theme.padding * 2;
                padding-left: Theme.padding * 4;
                padding-right: Theme.padding * 4;

                IconBtn {
                    icon: Icons.ai-robot;
                    hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                    clicked => {
                        ConfirmDialogSetting.set(true, Logic.tr("Info"), Logic.tr("Use ai to generate plan or not"), "ai-generate-record-plan", "");
                    }
                }

                IconBtn {
                    icon: Icons.delete;
                    hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                    clicked => {
                        if (seleted-index < 0 || seleted-index >= Store.record-plan-entry.plan.length) {
                            return;
                        }
                        ConfirmDialogSetting.set(true, Logic.tr("Warn"), Logic.tr("Remove or not"), "remove-record-plan", seleted-index);
                    }
                }

                IconBtn {
                    icon: Icons.add-light;
                    hover-color: Store.setting-preference.is-dark ? Theme.secondary-background.darker(50%) : Theme.secondary-background.darker(5%);

                    clicked => {
                        Logic.add-record-plan();
                    }
                }
            }
        }
    }
}

component BodyItem inherits Rectangle {
    in-out property <int> index;
    in-out property <RecordPlanEntry> entry;
    in-out property <bool> is-selected;

    out property mouse-x <=> move-btn.mouse-x;
    out property mouse-y <=> move-btn.mouse-y;
    out property pressed-x <=> move-btn.pressed-x;
    out property pressed-y <=> move-btn.pressed-y;

    callback head-clicked <=> ta.clicked;
    callback moved <=> move-btn.moved;
    callback pointer-event <=> move-btn.pointer-event;

    border-radius: Theme.border-radius;
    border-color: ta.has-hover || is-selected ? Theme.thirdly-brand-color : Theme.base-border-color;
    border-width: Theme.default-border-width;
    background: Theme.table-item-dark-color;
    height: vbox.preferred-height;

    ta := GainFocus { }

    vbox := VerticalLayout {
        Rectangle {
            HorizontalLayout {
                alignment: space-between;
                padding: Theme.padding * 2;

                Label {
                    font-weight: Theme.bold-font-weight;
                    text: Logic.tr("Step") + " " + (index + 1);
                    color: entry.is-finished ? Theme.success-color : Theme.primary-text-color;
                }

                HorizontalLayout {
                    spacing: Theme.padding * 4;

                    SwitchBtn {
                        checked: entry.is-finished;
                        indicator-size: Theme.icon-size * Theme.golden-ratio;

                        toggled => {
                            entry.is-finished = !entry.is-finished;
                        }
                    }

                    move-btn := IconBtn {
                        icon: Icons.move;
                        show-icon-hover-background: false;
                        mouse-cursor: self.has-hover ? MouseCursor.move : MouseCursor.default;
                    }
                }
            }
        }

        HorizontalLayout {
            padding: Theme.padding;

            Rectangle {
                height: te.font-size * 4;
                background: Theme.base-background;

                te := TxtEdit {
                    text: entry.detail;
                    border-color: Theme.base-border-color;
                }
            }
        }
    }
}

component Body inherits Flickable {
    in-out property <int> seleted-index: -1;

    private property <int> moving-index: -1;
    private property <length> item-height;
    private property next-item-pos-y <=> Store.next-record-plan-item-pos-y;

    interactive: false;
    viewport-height: next-item-pos-y;

    init => {
        next-item-pos-y = 0px;
    }

    Rectangle {
        GainFocus {
            clicked => {
                seleted-index = -1;
            }
        }

        for entry[index] in Store.record-plan-entry.plan: BodyItem {
            private property <length> offset-y;

            height: item-height;
            index: index;
            entry: entry;
            is-selected: index == seleted-index;

            init => {
                if (index == 0) {
                    item-height = self.preferred-height;
                }
                self.y = next-item-pos-y;
                next-item-pos-y += item-height + Theme.spacing * 2;
            }

            head-clicked => {
                if (seleted-index == -1) {
                    seleted-index = index;
                } else {
                    seleted-index = -1;
                }
            }

            moved => {
                if (moving-index < 0) {
                    return;
                }
                self.offset-y = self.pressed-y - self.mouse-y;
                self.y = Math.clamp(self.y - self.offset-y, 0, Math.max(root.viewport-height, root.height) - self.height);
            }

            pointer-event(event) => {
                if (event.button == PointerEventButton.left) {
                    if (event.kind == PointerEventKind.down) {
                        moving-index = index;
                    } else {
                        Logic.swap-record-plan(moving-index, self.y, item-height + Theme.spacing * 2);
                        moving-index = -1;
                    }
                }
            }
        }
    }
}

export component RecordPlanDialog inherits Dialog {
    title: Logic.tr("Edit Plan");
    is-prevent-event-forward: true;
    is-hide-bottom-btns: true;

    in-out property <length> inner-height: 650px;

    VerticalLayout {
        padding: Theme.padding * 2;
        padding-top: Theme.padding * 4;
        spacing: Theme.spacing * 4;
        height: root.inner-height;

        VerticalLayout {
            alignment: center;

            HeadBar {
                seleted-index: body.seleted-index;
            }
        }

        body := Body { }
    }

    cancel-clicked => {
        Logic.switch-popup(PopupIndex.None);
    }
}
