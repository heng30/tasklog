import { Store,  SettingPreference, SettingProxy, TabIndex, PopupIndex, SettingDetailIndex, RecordState, RecordEntry, RecordPlanEntry, RecordPlanEntry } from "store.slint";

import { Theme } from "theme.slint";

export global Logic {
    callback update-cache-size();
    callback remove-all-cache();

    callback copy-to-clipboard(text: string);
    callback paste-from-clipboard() -> string;

    callback get-setting-preference() -> SettingPreference;
    callback set-setting-preference(setting: SettingPreference);

    callback get-setting-proxy() -> SettingProxy;
    callback set-setting-proxy(setting: SettingProxy);

    callback increase-font-size();
    callback decrease-font-size();

    pure callback inner-tr(is-cn: bool, text: string) -> string;
    inner-tr(is-cn, text) => {
        return text;
    }

    pure public function tr(text: string) -> string {
        inner-tr(Store.is-cn, text)
    }

    public function switch-setting-detail(index: SettingDetailIndex) {
        if (Store.current-setting-detail-index == index) {
            return;
        }
        Store.current-setting-detail-index = index;
    }

    public function switch-tab(index: TabIndex) {
        if (Store.current-tab-index == index) {
            return;
        }
        if (index == TabIndex.Back) {
            Store.current-tab-index = Store.previous-tab-index;
        } else {
            Store.previous-tab-index = Store.current-tab-index;
            Store.current-tab-index = index;
        }
    }

    public function switch-popup(index: PopupIndex) {
        Store.current-popup-index = index;
    }

    //////////////////////////////// Logic Start  ////////////////////////////////

    callback refresh-records();
    callback new-record(entry: RecordEntry);
    callback update-record(entry: RecordEntry);
    callback remove-record(index: int);
    callback archive-record(index: int);
    callback search-record(keyword: string);
    callback update-record-state(index: int, state: RecordState);
    callback open-record-dialog(index: int);

    pure callback record-progress(entry: RecordEntry) -> float;
    record-progress(entry) => {
        return 0.5;
    }

    pure callback remain-days(start_day: string, end_day: string) -> int;
    pure callback remain-days-numbers(start_day: string, end_day: string) -> [int];
    remain-days-numbers(start-date, end-date) => {
        return [4, 5, 8];
    }

    callback add-archive(entry: RecordEntry);
    callback recover-archive(index: int);
    callback remove-archive(index: int);

    callback add-record-plan();
    callback remove-record-plan(index: int);
    callback remove-all-record-plans();
    callback update-record-plan(index: int, entry: RecordPlanEntry);
    callback ai-generate-record-plan();
    callback open-record-plan-dialog(index: int);
    callback move-record-plan(start-index: int, y: length, item-height: length);

    pure callback current-record-plan-step(entries: [RecordPlanEntry], flag: bool) -> int;
    pure callback calc-record-plan-steps(counts: int) -> [string];
    calc-record-plan-steps() => {
        ["1", "2", "3", "4", "5"];
    }

    pure public function state-color(state: RecordState) -> color {
        if (state == RecordState.Running) {
            return Theme.thirdly-brand-color;
        } else if (state == RecordState.Finished) {
            return Theme.success-color;
        } else if (state == RecordState.Giveup) {
            return Theme.danger-color;
        } else if (state == RecordState.Timeout) {
            return Theme.warning-color;
        } else {
            return Theme.info-color;
        }
    }

    pure public function state-to-str(state: RecordState) -> string {
        if (state == RecordState.Running) {
            return Logic.tr("Running");
        } else if (state == RecordState.Finished) {
            return Logic.tr("Finished");
        } else if (state == RecordState.Giveup) {
            return Logic.tr("Giveup");
        } else if (state == RecordState.Timeout) {
            return Logic.tr("Timeout");
        } else {
            return Logic.tr("NotStarted");
        }
    }

    pure public function str-to-state(state: string) -> RecordState {
        if (state == Logic.tr("Running")) {
            return RecordState.Running;
        } else if (state == Logic.tr("Finished")) {
            return RecordState.Finished;
        } else if (state == Logic.tr("Giveup")) {
            return RecordState.Giveup;
        } else if (state == Logic.tr("Timeout")) {
            return RecordState.Timeout;
        } else {
            return RecordState.NotStarted;
        }
    }

    //////////////////////////////// Logic End  ////////////////////////////////
}
